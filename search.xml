<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cisco Packet Tracer 实验</title>
      <link href="/2021/12/22/Cisco_Packet_Tracer%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/12/22/Cisco_Packet_Tracer%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark 实验</title>
      <link href="/2021/12/22/Wireshark%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/12/22/Wireshark%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>请自行查找或使用如下参考资料，了解 Wireshark 的基本使用：</p><ul><li>选择对哪块网卡进行数据包捕获</li><li>开始/停止捕获</li><li>了解 Wireshark 主要窗口区域</li><li>设置数据包的过滤</li><li>跟踪数据流<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="实作一-熟悉-Ethernet-帧结构"><a href="#实作一-熟悉-Ethernet-帧结构" class="headerlink" title="实作一 熟悉 Ethernet 帧结构"></a>实作一 熟悉 Ethernet 帧结构</h3>使用 Wireshark 任意进行抓包，熟悉 Ethernet 帧的结构，如：目的 MAC、源 MAC、类型、字段等<br><img src="https://img-blog.csdnimg.cn/ac298db501b44a81932e226b9ee4eebd.png#pic_center" alt="在这里插入图片描述"></li></ul><span id="more"></span><h3 id="✎-问题"><a href="#✎-问题" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>你会发现 Wireshark 展现给我们的帧中没有校验字段，请了解一下原因。</p><p>答： Wireshark 抓取的包会自动丢弃掉校验字段</p><h3 id="实作二-了解子网内-外通信时的-MAC-地址"><a href="#实作二-了解子网内-外通信时的-MAC-地址" class="headerlink" title="实作二 了解子网内/外通信时的 MAC 地址"></a>实作二 了解子网内/外通信时的 MAC 地址</h3><p>1.ping 你旁边的计算机（同一子网），同时用 Wireshark 抓这些包（可使用 icmp 关键字进行过滤以利于分析），记录一下发出帧的目的 MAC 地址以及返回帧的源 MAC 地址是多少？这个 MAC 地址是谁的？<br><img src="https://img-blog.csdnimg.cn/66cfd64ad61a40e9ab8457068bb5f754.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cfd9a1978434404e8b9c2dba2f03459a.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cabdb13cdabe48d8be64a2ff11e10c0f.png#pic_center" alt="在这里插入图片描述">这个MAC地址则是我所ping的电脑的MAC地址</p><p>2.然后 ping qige.io （或者本子网外的主机都可以），同时用 Wireshark 抓这些包（可 icmp 过滤），记录一下发出帧的目的 MAC 地址以及返回帧的源 MAC 地址是多少？这个 MAC 地址是谁的？<br><img src="https://img-blog.csdnimg.cn/0adce3dbc5bd48c8bea8a908b1091659.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0be9cab955fc45a7b0c0fcee3e5f99ae.png#pic_center" alt="在这里插入图片描述"><br>该MAC地址是子网网关的物理地址</p><p>3.再次 ping <a href="http://www.cqjtu.edu.cn/">www.cqjtu.edu.cn</a> （或者本子网外的主机都可以），同时用 Wireshark 抓这些包（可 icmp 过滤），记录一下发出帧的目的 MAC 地址以及返回帧的源 MAC 地址又是多少？这个 MAC 地址又是谁的？（我 ping 的是百度的）<br><img src="https://img-blog.csdnimg.cn/2ae408d33bac4cdfbd5285312a822a67.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9c2bbf8bc36746b4839c0c3bc7bb75d1.png#pic_center" alt="在这里插入图片描述"></p><h3 id="✎-问题-1"><a href="#✎-问题-1" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>通过以上的实验，你会发现：<br>访问本子网的计算机时，目的 MAC 就是该主机的<br>访问非本子网的计算机时，目的 MAC 是网关的<br>请问原因是什么？</p><p>答：原因就是子网内部的通信不需要经过网关进行，可以直接在两台主机间，而如果访问子网外的主机，就需要第一步通过网关这个出口，出到子网外。</p><h3 id="实作三-掌握-ARP-解析过程"><a href="#实作三-掌握-ARP-解析过程" class="headerlink" title="实作三 掌握 ARP 解析过程"></a>实作三 掌握 ARP 解析过程</h3><p>1.为防止干扰，先使用 arp -d * 命令清空 arp 缓存<br>2.然后 ping qige.io（或者本子网外的主机都可以），同时用Wireshark抓这些包（可arp过滤）查看这次 ARP 请求的是什么。<br><img src="https://img-blog.csdnimg.cn/21384823cd334c23ade7b08ea33e9dd3.png#pic_center" alt="在这里插入图片描述"></p><h3 id="✎-问题-2"><a href="#✎-问题-2" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>通过以上的实验，你应该会发现，<br>1、ARP 请求都是使用广播方式发送的<br>2、如果访问的是本子网的 IP，那么 ARP 解析将直接得到该 IP 对应的 MAC；如果访问的非本子网的 IP， 那么 ARP 解析将得到网关的 MAC。<br>请问为什么？</p><p>答：当本机访问的是本子网的计算机，数据包无需离开本通信子网， ARP 解析将也是在本子网里进行，所以ARP解析得到是对方主机的MAC物理地址；<br>当本机访问的是非本子网的计算机，也就是说此时有两个不同通信子网的主机之间需要通信，数据包就需要离开本通信子网，这里就涉及到数据包在两个通信子网的传输，传输数据要离开本通信子网，ARP 解析就势必要经过网关，因此，该ARP 解析得到的目的MAC物理地址就是本网关的物理地址。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="实作一-熟悉-IP-包结构"><a href="#实作一-熟悉-IP-包结构" class="headerlink" title="实作一 熟悉 IP 包结构"></a>实作一 熟悉 IP 包结构</h3><p>使用 Wireshark 任意进行抓包（可用 ip 过滤），熟悉 IP 包的结构，如：版本、头部长度、总长度、TTL、协议类型等字段<br><img src="https://img-blog.csdnimg.cn/27150ebca2c14053959f1f65dbc0ccd6.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="✎-问题-3"><a href="#✎-问题-3" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>为提高效率，我们应该让 IP 的头部尽可能的精简。但在如此珍贵的 IP 头部你会发现既有头部长度字段，也有总长度字段。请问为什么？<br>答：便于传输时的识别IP总长度，节省时间，当长度超过1500B时就会被返回链路层进行分段。</p><h3 id="实作二-IP-包的分段与重组"><a href="#实作二-IP-包的分段与重组" class="headerlink" title="实作二 IP 包的分段与重组"></a>实作二 IP 包的分段与重组</h3><p>根据规定，一个 IP 包最大可以有 64K 字节。但由于 Ethernet 帧的限制，当 IP 包的数据超过 1500 字节时就会被发送方的数据链路层分段，然后在接收方的网络层重组。</p><p>缺省的，ping 命令只会向对方发送 32 个字节的数据。我们可以使用 <code>ping 202.202.240.16 -l 2000</code> 命令指定要发送的数据长度。此时使用 Wireshark 抓包（用 <code>ip.addr == 202.202.240.16</code> 进行过滤），了解 IP 包如何进行分段，如：分段标志、偏移量以及每个包的大小等</p><p><img src="https://img-blog.csdnimg.cn/73b76a26865e452bbcccf0f8bb699787.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/f01c14cb183b4551b7a9223791bfddad.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202fb8c2f2794b0ca600752cb8d78810.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="✎-问题-4"><a href="#✎-问题-4" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>分段与重组是一个耗费资源的操作，特别是当分段由传送路径上的节点即路由器来完成的时候，所以 IPv6 已经不允许分段了。那么 IPv6 中，如果路由器遇到了一个大数据包该怎么办？</p><p>答：会直接丢弃，并返回主机发送失败的信息</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="实作一-熟悉-TCP-和-UDP-段结构"><a href="#实作一-熟悉-TCP-和-UDP-段结构" class="headerlink" title="实作一 熟悉 TCP 和 UDP 段结构"></a>实作一 熟悉 TCP 和 UDP 段结构</h3><p>1.用 Wireshark 任意抓包（可用 tcp 过滤），熟悉 TCP 段的结构，如：源端口、目的端口、序列号、确认号、各种标志位等字段<br><img src="https://img-blog.csdnimg.cn/595a682f72f44b4fa5ea4c68f3da253a.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>2.用 Wireshark 任意抓包（可用 udp 过滤），熟悉 UDP 段的结构，如：源端口、目的端口、长度等<br><img src="https://img-blog.csdnimg.cn/9e80cec4cd8b4e93a15c3554c97f5fd7.png#pic_center" alt="在这里插入图片描述"></p><h3 id="✎-问题-5"><a href="#✎-问题-5" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>由上大家可以看到 UDP 的头部比 TCP 简单得多，但两者都有源和目的端口号。请问源和目的端口号用来干什么？</p><p>答：源端口和目的端口是用来确认某一个应用程序，IP 只到达子网网关，MAC 只到达子网下的指定主机，而端口号是达到主机上的某个应用程序。</p><h3 id="实作二-分析-TCP-建立和释放连接"><a href="#实作二-分析-TCP-建立和释放连接" class="headerlink" title="实作二 分析 TCP 建立和释放连接"></a>实作二 分析 TCP 建立和释放连接</h3><p>1.打开浏览器访问 <code>qige.io</code> 网站，用 Wireshark 抓包（可用 tcp 过滤后再使用加上 <code>Follow TCP Stream</code>），不要立即停止 Wireshark 捕获，待页面显示完毕后再多等一段时间使得能够捕获释放连接的包<br>2.请在你捕获的包中找到三次握手建立连接的包，并说明为何它们是用于建立连接的，有什么特征<br><img src="https://img-blog.csdnimg.cn/ff40242742db4fe4a2f8e12623e01795.png#pic_center" alt="在这里插入图片描述"><br>通过发出 SYN 信号请求连接，然后服务器端回应 ACK 确认收到请求，然后主机再发出一个确认信号。第一次握手时除了 SYN = 1 外其余的标志都为 0 ，第二次握手时除了 SYN = 1 且 ACK = 1 外其余的标志都为 0 ，第三次握手时除了 ACK = 1 外其余的标志都为 0。<br><img src="https://img-blog.csdnimg.cn/69e667ad07a34bbcb100ac68507ced24.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>3.请在你捕获的包中找到四次挥手释放连接的包，并说明为何它们是用于释放连接的，有什么特征<br><img src="https://img-blog.csdnimg.cn/aac40168eaed4f9593b5f73fbe38ac4c.png#pic_center" alt="在这里插入图片描述"><br>原始是将第二次、第三次挥手合并成了一个包，所以只看到了三个包。首先发出 FIN 信号请求断开，然后服务器端回应一个 ACK 确认信号，然后又发出一个 FIN 信号（这里将 ACK 和 FIN 合并成立一个包），然后主机回应一个 ACK 确认信号，即可断开连接。</p><h3 id="✎-问题一"><a href="#✎-问题一" class="headerlink" title="✎ 问题一"></a>✎ 问题一</h3><p>去掉 <code>Follow TCP Stream</code>，即不跟踪一个 TCP 流，你可能会看到访问 qige.io 时我们建立的连接有多个。请思考为什么会有多个连接？作用是什么？</p><p>答：有多个连接相当于有多个传输通道，作用是以此加快传输数据的速度。</p><h3 id="✎-问题二"><a href="#✎-问题二" class="headerlink" title="✎ 问题二"></a>✎ 问题二</h3><p>我们上面提到了释放连接需要四次挥手，有时你可能会抓到只有三次挥手。原因是什么？</p><p>答：原因是将第二次、第三次挥手发出的包（ACK 和 FIN ）合并为了一个包。</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="实作一-了解-DNS-解析"><a href="#实作一-了解-DNS-解析" class="headerlink" title="实作一 了解 DNS 解析"></a>实作一 了解 DNS 解析</h3><p>1.先使用 <code>ipconfig /flushdns</code> 命令清除缓存，再使用 nslookup qige.io 命令进行解析，同时用 Wireshark 任意抓包（可用 <code>dns</code> 过滤）<br><img src="https://img-blog.csdnimg.cn/418b85cf4220411295555357618011c3.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>2.你应该可以看到当前计算机使用 <code>UDP</code>，向默认的 DNS 服务器的 53 号端口发出了查询请求，而 DNS 服务器的 53 号端口返回了结果<br><img src="https://img-blog.csdnimg.cn/0239ce68df3148808e8c88d9135af29d.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fd752df8e4ed4f61b99376f70080de4b.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="✎-问题-6"><a href="#✎-问题-6" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>你可能会发现对同一个站点，我们发出的 DNS 解析请求不止一个，思考一下是什么原因？</p><p>答：DNS不止一个的原因可能是DNS解析过程是先从浏览器的DNS缓存中检查是否有这个网址的映射关系，如果有，就返回IP，完成域名解析；如果没有，操作系统会先检查自己本地的hosts文件是否有这个网址的映射关系，如果有，就返回IP，完成域名解析；如果还没有，电脑就要向本地DNS服务器发起请求查询域名；本地DNS服务器拿到请求后，先检查一下自己的缓存中有没有这个地址，有的话直接返回；没有的话本地DNS服务器会从配置文件中读取根DNS服务器的地址，然后向其中一台发起请求；直到获得对应的IP为止。</p><h3 id="实作二-了解-HTTP-的请求和应答"><a href="#实作二-了解-HTTP-的请求和应答" class="headerlink" title="实作二 了解 HTTP 的请求和应答"></a>实作二 了解 HTTP 的请求和应答</h3><p>1.打开浏览器访问 qige.io 网站，用 Wireshark 抓包（可用<code>http</code> 过滤再加上 <code>Follow TCP Stream</code>），不要立即停止 Wireshark 捕获，待页面显示完毕后再多等一段时间以将释放连接的包捕获<br><img src="https://img-blog.csdnimg.cn/578331629e11491a93d791ec596617ab.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>2.请在你捕获的包中找到 <code>HTTP</code> 请求包，查看请求使用的什么命令，如：<code>GET, POST</code>。并仔细了解请求的头部有哪些字段及其意义<br><img src="https://img-blog.csdnimg.cn/e0f70e1aeab54d50a90699f448efbde6.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>3.请在你捕获的包中找到 HTTP 应答包，查看应答的代码是什么，如：<code>200, 304, 404</code> 等。并仔细了解应答的头部有哪些字段及其意义<br><img src="https://img-blog.csdnimg.cn/41e1dc2a0a624d52ae1a17a06fcf6168.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>200：交易成功；<br>304：客户端已经执行了GET，但文件未变化；<br>404：没有发现文件、查询或URl；</p><h3 id="✎-问题-7"><a href="#✎-问题-7" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>刷新一次 qige.io 网站的页面同时进行抓包，你会发现不少的 304 代码的应答，这是所请求的对象没有更改的意思，让浏览器使用本地缓存的内容即可。那么服务器为什么会回答 304 应答而不是常见的 200 应答？</p><p>答：服务器对于浏览器的第一次应答对于浏览器来说已经有了缓存，因此浏览器第二次发送请求的时候，服务器会回复浏览器上次请求的资源现在在缓存里，因此服务器根据浏览器传来的时间发现和当前请求资源的修改时间一致，应答304，表示不再重新传送资源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证性实验</title>
      <link href="/2021/12/22/%E9%AA%8C%E8%AF%81%E6%80%A7%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/12/22/%E9%AA%8C%E8%AF%81%E6%80%A7%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h2><h3 id="实作一"><a href="#实作一" class="headerlink" title="实作一"></a>实作一</h3><blockquote><p>ipconfig 是微软操作系统的计算机上用来控制网络连接的一个命令行工具。它的主要用来显示当前网络连接的配置信息（/all 参数）</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4a602aadf1d34d06bc36c8304f299eaf.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><span id="more"></span><h3 id="✎-问题"><a href="#✎-问题" class="headerlink" title="✎ 问题"></a>✎ 问题</h3><p>你的计算机和旁边的计算机是否处于同一子网，为什么？</p><p>答：是。子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。<br>子网掩码与IP地址结构相同，是32位二进制数，其中网络号部分全为“1”和主机号部分全为“0”。利用子网掩码可以判断两台主机是否中同一子网中。若两台主机的IP地址分别与它们的子网掩码相“与”后的结果相同，则说明这两台主机在同一子网中。</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><blockquote><p>PING （Packet Internet Groper），因特网包探索器，用于测试网络连接量的程序 。ping 是工作在 TCP/IP 网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送 ICMP（Internet Control Message Protocol 因特网报文控制协议）Echo 请求报文，测试目的站是否可达及了解其有关状态。</p></blockquote><h3 id="实作一-1"><a href="#实作一-1" class="headerlink" title="实作一"></a>实作一</h3><p><img src="https://img-blog.csdnimg.cn/065765450b4e44cfbfa7ac8cba95499b.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>一共接收到了四个回复，都是 32 个字节长度的数据，与对方主机往返一次花费了 128ms ，一般情况下 TTL 都是设为 128。</p><p><strong>回显的结果包括：字节数，反应时间，TTL（生存时间）<br>TTL是 Time To Live的缩写，该字段指定IP包被路由器丢弃之前允许通过的最大网段数量。TTL是IPv4报头的一个8 bit字段。</strong></p><h3 id="实作二"><a href="#实作二" class="headerlink" title="实作二"></a>实作二</h3><p>使用 ping/? 命令了解该命令的各种选项并实际使用。<br><img src="https://img-blog.csdnimg.cn/c2eb89c1899c4ac6b4a5af48866b2693.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="✎问题"><a href="#✎问题" class="headerlink" title="✎问题"></a>✎问题</h3><p>假设你不能 ping 通某计算机或 IP，但你确定该计算机和你之间的网络是连通的，那么可能的原因是什么？该如何处理能保证 ping 通？</p><p>答：可能是自己的网络出现故障不能访问某计算机，我们一般可采用由近及远的连通性测试来确定问题所在。</p><h2 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h2><blockquote><p>TRACERT (Trace Route 的组合缩写)，也称为路由追踪，该命令行程序可用于跟踪 Internet 协议 （IP） 数据包传送到目标地址时经过的路径。</p></blockquote><h3 id="实作一-2"><a href="#实作一-2" class="headerlink" title="实作一"></a>实作一</h3><p>要了解到某计算机如 <a href="http://www.baidu.com/">www.baidu.com</a> 中间经过了哪些节点（路由器）及其它状态，可使用 tracert <a href="http://www.baidu.com/">www.baidu.com</a> 命令，查看反馈的信息，了解节点的个数。<br><img src="https://img-blog.csdnimg.cn/2261921fb9cf4508bcae5f2b9fe2de27.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>可通过网站 <a href="http://ip.cn/">http://ip.cn</a> 查看这些节点位于何处，是哪个公司的，大致清楚本机到百度服务器之间的路径。<br><img src="https://img-blog.csdnimg.cn/fe6e02aad4c54ce8ada2d2685fa8caf0.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3dbc2ffa990d4fea8f1c826fb87dac21.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2e4f06e9988e40cca15956a19c29c351.png#pic_center" alt="在这里插入图片描述"></p><h3 id="实作二-1"><a href="#实作二-1" class="headerlink" title="实作二"></a>实作二</h3><p>ping.pe 这个网站可以探测从全球主要的 ISP 到某站点如 <a href="https://qige.io/">https://qige.io</a> 的线路状态，当然也包括各线路到该主机的路由情况。请使用浏览器访问 <a href="http://ping.pe/qige.io">http://ping.pe/qige.io</a> 进行了解。<br><img src="https://img-blog.csdnimg.cn/795296789ca44802baada321d65a6562.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="✎问题一"><a href="#✎问题一" class="headerlink" title="✎问题一"></a>✎问题一</h3><p>tracert 能告诉我们路径上的节点以及大致的延迟等信息，那么它背后的原理是什么？本问题可结合第二部分的 Wireshark 实验进行验证。</p><p>答：通过向目标发送不同IP生存时间 (TTL) 值的“Internet控制消息协议(ICMP)”回应数据包，Tracert诊断程序确定到目标所采取的路由。要求路径上的每个路由器在转发数据包之前至少将数据包上的 TTL 递减1。数据包上的 TTL 减为 0 时，路由器应该将“ICMP 已超时”的消息发回源系统。 Tracert 先发送 TTL 为 1的回应数据包，并在随后的每次发送过程将TTL递增 1，直到目标响应或 TTL 达到最大值，从而确定路由。通过检查中间路由器发回的“ICMP已超时”的消息确定路由。某些路由器不经询问直接丢弃 TTL 过期的数据包，这在 Tracert 实用程序中看不到。</p><h3 id="✎问题二"><a href="#✎问题二" class="headerlink" title="✎问题二"></a>✎问题二</h3><p>在以上两个实作中，如果你留意路径中的节点，你会发现无论是访问百度还是棋歌教学网，路径中的第一跳都是相同的，甚至你应该发现似乎前几个节点都是相同的，你的解释是什么？</p><p>答：主机的测试数据会送到网关，然后才能访问外网，有多个网关的情况下，就会出现前几个结点都是相同的。</p><h3 id="✎问题三"><a href="#✎问题三" class="headerlink" title="✎问题三"></a>✎问题三</h3><p>在追踪过程中，你可能会看到路径中某些节点显示为 * 号，这是发生了什么？</p><p>答：没有出现具体的信息反馈，请求超时</p><h3 id="📬-秘籍"><a href="#📬-秘籍" class="headerlink" title="📬 秘籍"></a>📬 秘籍</h3><p>如果你使用 Linux 系统，那么应该用过其下的 My Trace Route 即 mtr 命令。<br>该命令的速度比 Windows 平台下的 tracert 快多了。为此，有人也开发了 Windows下的 命令，你可以试一试。其次还可以试试<br>另外，提供一个全球地图，可视化的显示追踪路径也值得你前往（因为使用了 Google 地图，需要科学上网）</p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><blockquote><p>ARP（Address Resolution Protocol）即地址解析协议，是用于根据给定网络层地址即 IP 地址，查找并得到其对应的数据链路层地址即 MAC地址的协议。 ARP 协议定义在 1982 年的 RFC 826</p></blockquote><h3 id="实作一-3"><a href="#实作一-3" class="headerlink" title="实作一"></a>实作一</h3><p>运行 arp -a 命令查看当前的 arp 缓存， 请留意缓存了些什么<br><img src="https://img-blog.csdnimg.cn/a666c0fed59e44a8915a4a4c80d61717.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="实作二-2"><a href="#实作二-2" class="headerlink" title="实作二"></a>实作二</h3><p>请使用 arp /? 命令了解该命令的各种选项。<br><img src="https://img-blog.csdnimg.cn/837db25b4fea4d8e82a058d0684a7ba0.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="✎问题-1"><a href="#✎问题-1" class="headerlink" title="✎问题"></a>✎问题</h3><p>在实作三中，为何缓存中常常有网关的信息？</p><p>答：因为在对外传输数据的时候，会将经过的网关信息存储在缓存中，方便下次使用。<br>我们将网关或其它计算机的 arp 信息设置为静态有什么优缺点？<br>优点：利于管理，同时将 IP-MAC 绑定可以有效的防治 ARP 欺骗，并且可以免除用户进行身份认证的繁琐操作；<br>缺点：不利于维护 arp 列表，维护起来麻烦，倘若有人冒充其中一个 IP ，对用户的安全会造成极大的隐患。</p><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><blockquote><p>DHCP（Dynamic Host Configuration Protocol）即动态主机配置协议，是一个用于 IP 网络的网络协议，位于 OSI 模型的应用层，使用 UDP 协议工作，主要有两个用途：<br>1、用于内部网或网络服务供应商自动分配 IP 地址给用户<br>2、用于内部网管理员对所有电脑作中央管理<br>简单的说，DHCP 可以让计算机自动获取/释放网络配置</p></blockquote><h3 id="实作一-4"><a href="#实作一-4" class="headerlink" title="实作一"></a>实作一</h3><p>一般地，我们自动获取的网络配置信息包括：IP 地址、子网掩码、网关 IP 以及 DNS 服务器 IP 等。使用 ipconfig/release 命令释放自动获取的网络配置，并用 ipconfig/renew 命令重新获取，了解 DHCP 工作过程和原理</p><p><img src="https://img-blog.csdnimg.cn/878a5576f6814f01b49e5e4fd974267c.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c49b5ab54d514c90ad24c101398cb6fb.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="✎问题-2"><a href="#✎问题-2" class="headerlink" title="✎问题"></a>✎问题</h3><p>如果你没能成功的释放，请思考有哪些可能的原因并着手进行解决？</p><p>答：可能没有开启DHCP客户端服务；解决方法：在 “ 运行 ” 中输入 “ <code>sc config DHCP start= AUTO</code> ” 重启后就OK 了</p><h3 id="📬-秘籍-1"><a href="#📬-秘籍-1" class="headerlink" title="📬 秘籍"></a>📬 秘籍</h3><p>在我校不少地方如教室，计算机都采用了 DHCP 来获得网络配置。假如某天因 DHCP 服务器问题从而不能获得网络配置，那么我们可以查看隔壁教室计算机的配置信息来手动进行网络配置，从而使该计算机能够接入 Internet。<br>经常的，在一个固定地方的网络配置我都喜欢采用 静态/手动配置，而不是动态 DHCP 来进行。你能想到是什么原因吗？</p><p>答： IP 有限且主机较多，设置静态配置，避免IP被新接入的主机抢占 。</p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><blockquote><p>无论是使用 TCP 还是 UDP，任何一个网络服务都与特定的端口（Port Number）关联在一起。因此，每个端口都对应于某个通信协议/服务。<br>netstat（Network Statistics）是在内核中访问网络连接状态及其相关信息的命令行程序，可以显示路由表、实际的网络连接和网络接口设备的状态信息，以及与 IP、TCP、UDP 和 ICMP 协议相关的统计数据，一般用于检验本机各端口的网络服务运行状况</p></blockquote><h3 id="实作一-5"><a href="#实作一-5" class="headerlink" title="实作一"></a>实作一</h3><p>Windows 系统将一些常用的端口与服务记录在 C:\Windows\System32\drivers\etc\services 文件中，请查看该文件了解常用的端口号分配<br><img src="https://img-blog.csdnimg.cn/ee268285a289427db83728e19e615f2b.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="实作二-3"><a href="#实作二-3" class="headerlink" title="实作二"></a>实作二</h3><p>使用 netstat -an 命令，查看计算机当前的网络连接状况。更多的 netstat 命令选项，可参考上面链接 4 和 5<br><img src="https://img-blog.csdnimg.cn/aa454295eefc45aab21d9419223c3567.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="📬-秘籍-2"><a href="#📬-秘籍-2" class="headerlink" title="📬 秘籍"></a>📬 秘籍</h3><p>打开的计算机端口，就是向 Internet 打开的一个通道。通过 netstat 命令，我们可以了解当前计算机哪些端口是打开的，从而找出一些恶意后台程序，分析其所作所为，并且可以进一步将相关端口关闭，降低安全风险</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><blockquote><p>DNS（Domain Name System）即域名系统，是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 的 53 号端口</p></blockquote><h3 id="实作一-6"><a href="#实作一-6" class="headerlink" title="实作一"></a>实作一</h3><p>Windows 系统将一些固定的/静态的 DNS 信息记录在 C:\Windows\System32\drivers\etc\hosts 文件中，如我们常用的 localhost 就对应 127.0.0.1 。请查看该文件看看有什么记录在该文件中<br><img src="https://img-blog.csdnimg.cn/eea88ff50dd7429e93366109ae63e46b.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="实作二-4"><a href="#实作二-4" class="headerlink" title="实作二"></a>实作二</h3><p>解析过的 DNS 记录将会被缓存，以利于加快解析速度。请使用 ipconfig /displaydns 命令查看。我们也可以使用 ipconfig /flushdns 命令来清除所有的 DNS 缓存<br><img src="https://img-blog.csdnimg.cn/895e52c4a244409bb0d7590eddd5e349.png?x-oss-process=im,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="📬-秘籍-3"><a href="#📬-秘籍-3" class="headerlink" title="📬 秘籍"></a>📬 秘籍</h3><p>当我们使用浏览器上网时，或多或少的会看到一些广告。某些网站的广告是非常没有节操的，所以我们一般可以通过安装浏览器插件如 AdGuard、AdBlocker 等来拦截和过滤。<br>这种方法简单方便有效，不过有一定安全或隐私问题，因为该插件实时知道你访问的 URL。<br>假设不使用这种第三方的插件，希望自己完全控制，那么就请考虑在我们前面提到的 hosts 文件中添加 DNS 记录。有自愿者时时在维护全球正确的 DNS 记录文件 hosts-1 hosts-2</p><h3 id="✎问题-3"><a href="#✎问题-3" class="headerlink" title="✎问题"></a>✎问题</h3><p>上面秘籍中我们提到了使用插件或自己修改 hosts 文件来屏蔽广告，思考一下这种方式为何能过滤广告？如果某些广告拦截失效，那么是什么原因？你应该怎样进行分析从而能够成功屏蔽它？</p><p>答：通过将 127.0.0.1 广告链接设置为广告推送链接，从而广告链接就不放访问到本机，而是它自己的服务器；广告拦截失效是因为有个跨服务器访问问题；可以使用 adsafe——广告管家 解决这个跨服务器访问的问题</p><h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><blockquote><p>cache 即缓存，是 IT 领域一个重要的技术。我们此处提到的 cache 主要是浏览器缓存。<br>浏览器缓存是根据 HTTP 报文的缓存标识进行的，是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷</p></blockquote><h3 id="实作一-7"><a href="#实作一-7" class="headerlink" title="实作一"></a>实作一</h3><p>打开 Chrome 或 Firefox 浏览器，访问 <a href="https://qige.io/">https://qige.io</a> ，接下来敲 F12 键 或 Ctrl + Shift + I 组合键打开开发者工具，选择 Network 面板后刷新页面，你会在开发者工具底部看到加载该页面花费的时间。请进一步查看哪些文件被 cache了，哪些没有<br><img src="https://img-blog.csdnimg.cn/dd81a3fa19154a9cb5f350c6b857a2c9.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="实作二-5"><a href="#实作二-5" class="headerlink" title="实作二"></a>实作二</h3><p>接下来仍在 Network 面板，选择 Disable cache 选项框，表明当前不使用 cache，页面数据全部来自于 Internet，刷新页面，再次在开发者工具底部查看加载该页面花费的时间。你可比对与有 cache 时的加载速度差异<br><img src="https://img-blog.csdnimg.cn/e370f6a0795a47648cf9593ce0a4de4d.png?,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ2hhcm9uZG93bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="📬-秘籍-4"><a href="#📬-秘籍-4" class="headerlink" title="📬 秘籍"></a>📬 秘籍</h3><p>你的计算机可能还在使用 XX 管家，XX 卫士之类的垃圾软件，那么它可能就会在某些时候提示你计算机的垃圾文件有多少多少，请清理（其实是它本身应该被清理！）之类的弹窗。如果你查看一下它判断的所谓垃圾文件，你会发现大多都是浏览器的缓存，而你已经明白了这些缓存文件的作用。所以，最好是不要清理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想</title>
      <link href="/2021/07/22/%E9%9A%8F%E6%83%B3/"/>
      <url>/2021/07/22/%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1>学习是一场需要不断克服自己内心不同欲望的修行。</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
